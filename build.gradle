description = """Sip Softphone - Parent"""

buildscript {
  ext.kotlin_version = '1.0.4'

  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2"
    }
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'gradle.plugin.com.github.maiflai:gradle-scalatest:0.14'
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
  }
}

allprojects  {
  apply plugin: 'maven'
  apply plugin: 'jacoco'
  apply plugin: 'signing'
  apply plugin: 'com.github.maiflai.scalatest'

  group = 'com.github.mikekwright'
  version = '1.0-SNAPSHOT'

  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2"
    }
  }

  dependencies {
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.11.5'
  }


  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  signing {
    sign configurations.archives
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'kotlin'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  tasks.withType(JavaCompile) {
  	options.encoding = 'UTF-8'
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }

  dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
    compile group: 'javax.inject', name: 'javax.inject', version:'1'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.21'
    compile group: 'log4j', name: 'log4j', version:'1.2.17'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.2.9'
    testCompile group: 'org.scalactic', name: 'scalactic_2.11', version: '3.0.0'
    testCompile group: 'org.scalatest', name: 'scalatest_2.11', version: '3.0.0'
    testRuntime group: 'org.pegdown', name: 'pegdown', version: '1.6.0'
  }
}

task codeCoverageReport(type: JacocoReport) {
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  subprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled true
    xml.destination "${buildDir}/reports/jacoco/report.xml"
    html.enabled false
    csv.enabled false
  }
}

codeCoverageReport.dependsOn {
  subprojects*.test
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Example Application'
        packaging 'jar'
        // optionally artifactId can be defined here 
        description 'A application used as an example on how to set up 
          pushing  its components to the Central Repository.'
        url 'http://www.example.com/example-application'

        scm {
          connection 'scm:git:https://github.com/mikekwright/sip-softphone.git'
          developerConnection 'scm:git:https://github.com/mikekwright/sip-softphone.git'
          url 'https://github.com/mikekwright/sip-softphone'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'mikekwright'
            name 'Michael Wright'
            email 'mkwright@gmail.com'
          }
        }
      }
    }
  }
}



//This is to fix Intellij
ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false
